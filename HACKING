Basic concepts
==============

There are many users in the system.
Each user belongs to one and only one service.

We track 3 different kinds of objects:
- incoming snail mail
- outgoing snail mail
- bills validation
Each object belongs to an initial service.

Objects can be active or archived. When archived, they are not shown
in the main page but still can be browsed through the
archives. Objects cannot be un-archived. The goal of the archive is to
check the status of a given object months later, or show statistics on
the average internal processing time.

Mails can be transmitted to another service later on. In this case
they are not visible anymore for the previous owner - you do not need
to care about it anymore.

Invoices can also be transmitted to a different service, but "in
copy". Currently this is implemented differently than with mails:
you're still the owner of the invoice, but there's a special page where
you can see which invoices were copied to your service - this is done by
looking at the invoice's transmission history. This way you still can see
where your transmitted invoices are, and you keep track of who needs
to get back to you.

The history of transmissions is kept and one can analyse an object's
journey through services later on.

Invoices can be refused, in which case they are not shown anymore,
though they still exist somewhere in the system.


Tables
======

- accuse: receipt configuration
- courrier: stored mail messages (inbound and outbound)
  courrier.validite: 0 == active, 1 == archived
- destinataire: contacts
- estTransmis: transmission history for mail messages
- estTransmisCopie: transmission history for invoices
- facture: invoices
- priorite: priorities (used by mail messages and invoices)
- service: services / users groups
- sessions: long-lived sessions (authentication only)
- upgrades: unused, planned to memember the applied upgraded
- utilisateur: users


Tools
=====

We currently use HTML_QuickForm as a generic input validation
framework.

Both can be found at http://pear.php.net

To be more precise: we actually use our own GPLQuickForm, which is a
partial reimplementation released under the GNU GPL (HTML_QuickForm is
released under the PHP license, which is incompatible)

We also use a new implementation of Structure_DataGrid: SQLDataGrid.
It's able to locate one particular record (id) in a paginated list,
which Structure_DataGrid cannot do


Internationalization - i18n
===========================

We plan to use gettext to provide translations, even though this is
not available yet. That's why translatable strings are marked with
gettext's _() function.

Keep marking translatable strings that way, we'll be able to use PO
tools to extract those strings and easily manage them. Check the
https://gna.org/p/savane project for an sample implementation.


Version control
===============

Create a release branch::

  tla tag devel@patapouf.org--patapouf-arch/gcourrier--mainline--1.0 \
    gcourrier--release--1.7

That branch will be stable only get security and bug fixes. Main
developpement will continue the --mainline branch.

This allows people to follow that branch without worrying about
disruptive / backward-incompatible changes.



Invoices
========

4 screens:

- current / opened: they need to be validated. Once they are
  validated, they are marked as archived and disappear from this
  screen

- search current

- search archived

- foreign invoices transmitted to my service for validation
